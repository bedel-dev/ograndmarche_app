{"version":3,"file":"ng-masonry-grid.service.d.ts","sources":["ng-masonry-grid.service.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Shailendra Kumar <shailu.snist@gmail.com>\r\n * @ignore\r\n */\r\nimport { MasonryOptions, Masonry as IMasonry, AnimationOptions, ImagesLoadedConstructor, MasonryGridItem } from './ng-masonry-grid.interface';\r\nimport { Observable } from 'rxjs';\r\nexport declare class NgMasonryGridService {\r\n    private _platformId;\r\n    el: any;\r\n    masonryOptions: MasonryOptions;\r\n    animationOptions: AnimationOptions;\r\n    items: Array<any>;\r\n    itemsCount: number;\r\n    itemsRenderedCount: number;\r\n    didScroll: boolean;\r\n    resizeTimeout: any;\r\n    useAnimation: boolean;\r\n    isAnimate: boolean;\r\n    _msnry: IMasonry;\r\n    _onScrollHandler: any;\r\n    _onResizeHandler: any;\r\n    useImagesLoaded: boolean;\r\n    imagesLoaded: ImagesLoadedConstructor;\r\n    docElem: HTMLElement;\r\n    /**\r\n     * Default animation options of grid items on scroll\r\n     */\r\n    animationDefaults: AnimationOptions;\r\n    /**\r\n     * Default masonry options\r\n     */\r\n    masonryDefaults: MasonryOptions;\r\n    constructor(_platformId: any);\r\n    getViewportH(): number;\r\n    scrollY(): number;\r\n    getOffset(el: any): {\r\n        top: number;\r\n        left: number;\r\n    };\r\n    inViewport(el: any, h?: number): boolean;\r\n    extend(a: any, b: any): any;\r\n    /**\r\n     * Initialize and extend all options\r\n     * @param el: Masonry Container DOM Element\r\n     * @param masonryOptions: User defined Masonry Options\r\n     * @param useAnimation: User defined Animation (Boolean)\r\n     * @param animationOptions: User defined Animation options\r\n     * @param useImagesLoaded: User defined imagesloaded (Boolean)\r\n     */\r\n    init(el: any, masonryOptions: MasonryOptions, useAnimation?: boolean, animationOptions?: AnimationOptions, useImagesLoaded?: boolean): IMasonry;\r\n    initializeMasonry(_element: any, options: MasonryOptions): IMasonry;\r\n    private _init;\r\n    private _initMasonry;\r\n    private _onScrollFn;\r\n    private _scrollPage;\r\n    private _resizeHandler;\r\n    /**\r\n     * Check if total grid items are redered in the DOM\r\n     */\r\n    private _checkTotalRendered;\r\n    /**\r\n     * On Destroy remove Scroll and Resize event Listeners\r\n     */\r\n    onDestory(): void;\r\n    /**\r\n     * Remove scroll animations\r\n     */\r\n    removeAnimation(): void;\r\n    /**\r\n     * Add Each grid item to Masonry based on Masony addStatus property\r\n     * @param element Element - Grid item\r\n     */\r\n    add(element: any): void;\r\n    /**\r\n     * TODO: reorder masonry items on load\r\n     * @param element\r\n     */\r\n    addOrderItem(element: any): void;\r\n    /**\r\n     * Re order Masonry items to original order\r\n     */\r\n    reorderMasonryItems(): void;\r\n    /**\r\n     * Set add status to Masonry before adding or appending\r\n     * @param value 'append' or 'prepend' or 'add'\r\n     */\r\n    setAddStatus(value: string): void;\r\n    /**\r\n     * Remove grid item from Masonry\r\n     * @param item Element: Removed Grid Item DOM\r\n     */\r\n    removeItem(item: any): Observable<MasonryGridItem>;\r\n    /**\r\n     * Remove first grid item from the Masonry List\r\n     */\r\n    removeFirstItem(): Observable<MasonryGridItem>;\r\n    /**\r\n     * Empty the Masonry list\r\n     */\r\n    removeAllItems(): Observable<MasonryGridItem>;\r\n    /**\r\n     * Add transition effect on DOM Node removal\r\n     * @param elem: Grid item DOM element\r\n     */\r\n    addTransition(elem: any): void;\r\n    /**\r\n     * On transition End, remove eventListener\r\n     * @param observer Subscriber<MasonryGridItem>\r\n     * @param elem: Grid item DOM element\r\n     */\r\n    private _onTransitionEnd;\r\n}\r\n"]}